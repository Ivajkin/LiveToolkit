#LiveToolkit: Живая речь - инструменты для разработки пособий.
##Краткая информация о программе 
###Модуль разработанный с помощью LiveToolkit может представлять собой пособие или игру. Такой модуль может включать в себя:
1. Уроки -- теоритические сведения об изучаемом языке
2. Упражнения -- обычные классические упражнения, выполняемые как правило при помощи ручки и бумаги.
3. Книги -- текст со вставками, при нажатии на которые можно посмотреть значение слова и послушать его произношение. 
4. *Интерактивные упражнения* -- выбор слов по их звучанию (с картинками), ответы на вопросы, соотнесение слов их значению, рисование иероглифа
5. Обучающее видео с субтитрами, паузой, перемоткой
6. Аудирывание -- диалоги, песни, и т.п. на изучаемом языке и в виде аудиофайлов
7. Просто приложение на Java, запускаемое из основного модуля

Главный реализуемый *модуль* - *"Живая Речь: китайский язык"* (рабочее название латиницей: *"LiveChinese"*)
В процессе разработки пособия по китайскому языку инструментарий *LiveToolkit* развивается, только после полного окончания работы именно над этим модуем мы создаём другие пособия.

###Выходной формат данных имеет следующую структуру:
![Схема предполагаемой БД](http://s17.postimage.org/xshjdqy73/Live_Tool_Kit_BD.png)

##Об элементах модуля
Далее будем называть слоем совокупность, состоящую из вышеперичисленных элементов. Модулем или пакетом (package) будем называть один слой или совокупность слоёв в виде файла.
Основными особенностями рассматриваемого модуля является
1. периносимость
2. возможность неоднократной установки с разнородным содержимым
3. возможность содержать несколько уроков
4. универсальность: служит как для обновления учебной базы, так и для обновления LivePlatform.

Под __LivePlatform__ следует понимать платформу для распространения пособий. Включает систему покупки и обновления, сбора статистики, а также является навигационным приложением -- через него можно получить доступ к остальным частям пособия.
Чаще LivePlatform будем называть основным приложением.
###Рассмотрим требования к каждому элементу слоя:
####0. Общие требования
Обеспечение надёжной защиты слоя и единства с основным приложением. Другими словами, элементы слоя нельзя запустить вне LivePlatform, по крайней мере пользователю. Пользователь должен пройти базовый минимум упражнений -- предполагается интерактивных -- чтобы открыть доступ к следующему уроку, и следовательно, зависимым от него элементам. Дополнительный (бонусный) элемент независим от урока и доступен пользователю всегда. Некоторые одинаковые элементы могут использоваться в разных уроках.
####1. Lessons (Уроки)
Содержит теоритические сведения. Это в основном текстовая информация сопровождающаяся картинками. В процессе прохождения урока могут встречаться слова для запоминания, для которых необходимо дать перевод и произношение. Для наглядности допускается использование большого количества картинок. Одному уроку может сопоставляться неограниченное количество единиц других элементов. 
####2. Exercises (Упражнения)
Предполагается неограниченое количество упражнений к одному уроку. Должны присутствовать ответы к упражнениям. Никаких других требований к упражнениям не предъявляется.
####3. Books (Книги)
При нажатии на новые слова можно посмотреть значение слова и послушать его произношение. Допускается наличие картинок -- это даже необходимо, ведь книжки с картинками всегда интереснее. Предполагается учить читать пользователя постепенно, чтоб в каждой новой *"книге"* пользователь узнавал только небольшое количество новых слов -- иначе полтекста придётся выделять как новые слова. Одинаковые книги могут использоваться в разных уроках.
####4. Interactive Exercises (Интерактивные упражнения)
Приложение на Java, запускаемое только из основного приложения. Зависимы от уроков -- так как обязательны для перехода на следующий урок. Одинаковые упражнения могут использоваться в разных уроках, но с разными параметрами -- например, если пользователь в уроке 1 проходит упражнение на запоминание буквы *А*, передаём в упражнение параметр *-А*, если в уроке 2 на запоминание *Б* -- передаём *-Б*, в уроке 3 -- весь алфавит, передаём -- *-весь* и т.п.
####6. Videos (Видеоуроки)
Обучающее видео с субтитрами, паузой, перемоткой -- качество видео не должно бытьслишком маленькое -- мы выпускаем только качественную продукцию -- и не должно быть слишком большим -- слишком качественное видео повредит переносимости модуля. Видеоуроки независимы от уроков -> можуг выступать в виде бонусного содержимого. Одинаковые видеоуроки могут использоваться в разных уроках.
####6. Audio (Аудирование)
Аналогично видеоурокам. А также может использоваться для задания фоновой музыки и звуков.
####7. Application (Приложение)
Это самый полиморфмый элемент. Он может Представлять собой:
+ игру -- дополнительное (бонусное) содержимое в виде интерактивного упражнения не связанного с конкретным уроком;
+ обновление главного приложения;
+ рекламный банер;
+ что-нибудь ещё.

###О реализации требований 
Теперь когда собрана вся необходимая информация о составляющих частях, можно перейти к реализации модуля.
Как следует из определения, модуль поставляется одним файлом. Он может представлять собой определённый архив, данные в который запаковывает LiveToolKit, а распаковать может только LivePlatform. 
Вся последующая информация о реализации модуля представлена в виде схемы базы данных на вышеприведённом рисунке. Для начала рассмотрим общие идеи, а затем перейдём к конкретному примеру реализации на рисунке.
####0. Общие требования
Защиту модуля можно организовать реализовав его или его содержимое в качестве базы данных. Также можно использовать шифрование. Слой может не содержать уроков, в этом случае элементы в нём не связаны с уроками и считаются бонусными. В модуле представлено много разнородной информации большого объёма, откуда появляется вопрос эффективно ли хранить элементы в БД? и в БД какого типа: реляционные или NOSQL, MongoDB в частности? какие элементы лучше не хранить в БД? ..и т.п.
####1. Lessons (Уроки)
Поскольку не все элементы зависимы от урока, неправильно было оперировать другими элементами только относительно уроков. 
Каждый урок может содержмть много картинок для наглядности, поэтому лучше хранить их отдельно от БД. Картинки вне БД необходтмо будет пересохранить в виде файла в байтовом потоке (либо использовать шифрование), чтобы не дать доступ к ним графическим редакторам вне основного приложения.
Текстовую информацию в уроке удобно хранить в виде html-текста.
####2. Exercises (Упражнения)
Каждая "стопка" упражнений используется как правило для одного урока и маловероятен повтор упражнений в разных уроках. Поэтому упражнения можно жёстко привязать к урокам. На уровне БД -- это сделать поля в одной таблице.
####3. Books (Книги)
Вывод значения нового слова и его произношение можно реализовать при помощи html- либо своих тегов. 
Другой способ -- использовать компоненты GUI Java более эффективно. Толи в SWING, толи в SWT был такой компонент -- веббраузер (в другой либе похожий по функционалу richedit), он может одержать инфу форматированную в html-тегах. Если такой компонент может ещё и javaScript исполянять -- цены ему не будет. Вывод значения нового слова и его произношение на javaScript-е не составит особых проблем. 
Картинок в книгах будет не много. поэтому их можно хранить в БД либо на жёстком диске без необходимости шифрования.
Можно дать пользователю возможность просматреть все доступные книги. 
####4. Interactive Exercises (Интерактивные упражнения)
Если есть возможность использовать JavaScript, то код программы можно хранить в бд и, когда надо, запускать в компоненте браузера в LivePlatform по вызову пользователя.
Если же JavaScript не вариант, то можно посредством вызова определённых параметров запускать упражнение. 
Другой вариант -- исользовать архитекуру клиент-сервер. В этом случае упражнение-клиент булет передавать даннные на форму LivePlatform-серверу. Эти данные можно использовать для отрисовки упражнения в определённой форме в LivePlatform.
####6. Videos (Видеоуроки)
Качество 480 HD вполне подойдёт. Можно сделать так, чтобы пользователь имел возможность просматреть все доступные видеоуроки, в том числе и бонусные. Для этого дополнительно надо будет предоставить краткую информацию о видео в сплывающей подсказке.
####6. Audio (Аудирование)
Формат MP3 вполне подойдёт. Можно сделать так, чтобы пользователь имел возможность просматреть все доступные аудиофайлы, в том числе и бонусные. Для этого дополнительно надо будет предоставить краткую информацию о аудио в сплывающей подсказке.
####7. Application (Приложение)
Если приложение может содержать всё, что угодно, то порядок работы с его формами должен быть определён, и быть, по возможности, одинаковым для всех форм.
